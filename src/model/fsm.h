#ifndef FSM_TETRIS_H
#define FSM_TETRIS_H

/**
 * @mainpage Реализация игры "Тетрис" на языке Си
 * Данный проект представляет реализацию игры "Тетрис". Логика игры реализована
 * с использованием конечного автомата
 *
 * Цель игры заключается в наборе очков за построение линий из
 * генерируемых игрой блоков. Очередной блок, сгенерированный игрой, начинает
 * опускаться вниз по игровому полю, пока не достигнет нижней границы или не
 * столкнется с другим блоком. Пользовать может поворачивать фигуры и перемещать
 * их по горизонтали, стараясь составлять ряды. После заполнения ряд
 * уничтожается, игрок получает очки, а блоки, находящиеся выше заполненного
 * ряда опускаются вниз. Игра заканчивается, когда очередная фигура
 * останавливается в самом верхнем ряду.
 * @image html tetr.png
 *
 * @section Tetraminos В игре используется 7 видов фигур
 * @image html SRS-pieces.png
 * Фигуры выбрасываются в случайном порядке.
 *
 * @section FSM Конечный автомат игры выглядит следующим образом
 * @image html fsm.png
 * @section Данный КА состоит из следующих состояний:
 *
 *    - START_STATE — состояние, в котором игра ждет, пока игрок нажмет кнопку
 * готовности к игре.
 *    - SPAWN_STATE — состояние, в которое переходит игра при создании
 * очередного блока и выбора следующего блока для спавна.
 *    - MOVING_STATE — основное игровое состояние с обработкой ввода от
 * пользователя — поворот блоков/перемещение блоков по горизонтали.
 *    - SHIFTING_STATE — состояние, в которое переходит игра после истечения
 * таймера. В нем текущий блок перемещается вниз на один уровень.
 *    - PAUSE_STATE - состояние паузы, при котором игра замирает до отмены
 * пользователем
 *    - ATTACHING_STATE - состояние, в которое преходит игра после
 * «соприкосновения» текущего блока с уже упавшими или с землей. Если образуются
 * заполненные линии, то она уничтожается и остальные блоки смещаются вниз. Если
 * блок остановился в самом верхнем ряду, то игра переходит в состояние «игра
 * окончена».
 *    - GAME_OVER_STATE - состояние, в котором сохраняется рекорд, если он был
 * побит
 *    - EXIT_STATE - состояние, в которое переходит игра, если пользователь
 * решил выйти из программы. В нем происходит освобождение ресурсов
 *
 * Программа состоит из двух частей: библиотеки,
 * реализующей логику игры "Тетрис", и терминального интерфейса, реализованного
 * с помощью библиотеки ncurses.
 */

/**
 * @file
 * @brief функции по работе с конечным автоматом
 */

#include <stdlib.h>

#include "backend.h"
#include "defines.h"
#include "structures.h"

typedef enum {
  START_STATE,
  SPAWN_STATE,
  MOVING_STATE,
  PAUSE_STATE,
  SHIFTING_STATE,
  ATTACHING_STATE,
  GAME_OVER_STATE,
  EXIT_STATE
} StateMachine_tetris;

/// @brief выделение памяти под StateMachine_tetris
/// @return память под StateMachine_tetris
StateMachine_tetris *init_state_machine_tetris();

/// @brief получение текущего значения КА
/// @param machine указатель на память под StateMachine_tetris для
/// инициализации; NULL для получения текущего значения КА
/// @return указатель на текущее значение КА
StateMachine_tetris *current_state_machine(StateMachine_tetris *machine);

/// @brief чистка памяти, выделенной под КА
void destroy_state_machine();

/// @brief обработка действия пользователя
/// @param action пользовательское действие
void userInput(UserAction_t action);

/// @brief КА игры "Тетрис"
void sigact();

/// @brief выполнение действий по смещению падающей фигуры вниз на один ряд по
/// истечении таймера MOVING_STATE
void moving_timer_has_expired();

#endif