#ifndef STRUCTURES_H
#define STRUCTURES_H

#include <stdlib.h>

/**
 * @file
 * @brief объявления общих структур для игр
 *
 * @details структуры являются общими для всех игр в соответствии со
 * спецификацией из materials/library-specification.md. Это необходимо для
 * реализации общего пользовательского интерфейса
 */

/// @brief информация о движущейся фигуре
typedef struct {
  int **figure;  ///< указатель на массив, хранящий падающую фигуру / яблоко
  int idx;  ///< порядковый номер падающей фигуры (1-7) в соответствии с
            ///< SRS-pieces.png. idx = 4 для яблока
  int x;  ///< координата Х верхнего левого угла сектора фигуры относительно
          ///< поля
  int y;  ///< координата Y верхнего левого угла сектора фигуры относительно
          ///< поля
  int rows;  ///< количество рядов в массиве, хранящем падающую фигуру. Для
             ///< фигур 2-3 и 5-7 значение равно 3, для фигуры 1 значение равно
             ///< 4, для фигуры 4 значение равно 2. Для яблока значение равно 1
  int columns;  ///< количество рядов в массиве, хранящем падающую фигуру.
                ///< Аналогично полю rows
} moving_t;

/**
 * @brief информация об игре
 *
 */
typedef struct {
  int **field;  ///< указатель на массив, хранящий размещение фигур/змейки на
                ///< игровом поле
  moving_t *moving;  ///< указатель на структуру, храняющую информацию о
                     ///< падающей фигуре. Для змейки хранится позиция яблока
  int **next;  ///< массив, хранящий очередную фигуру. NULL в змейке
  int next_idx;  ///< порядковый номер очередной фигуры (1-7) в соответствии с
                 ///< SRS-pieces.png. 0 для змейки
  int score;     ///< счет игрока в текущей игре
  int high_score;  ///< рекорд игрока
  int level;  ///< уровень игры от 1 до 10. Чем выше уровень - тем выше скорость
              ///< игры
  int delay;  ///< время, отведенное для принятия решения пользователем в
              ///< MOVING_STATE
  char *user_name;  ///< имя пользователя, полученное при авторизации
} GameInfo_t;

/// @brief синглтон, хранящий static-переменную типа GameInfo
/// @param game_info для инициализации static-переменной передается валидный
/// указатель GameInfo_t. Для получения текущего состояния передается NULL
/// @return указатель на память, хранящую текущее состояние игры
GameInfo_t *current_game_info(GameInfo_t *game_info);

/// @brief функция для получения данных для отрисовки в интерфейсе
/// @return копия текущего состояния игры. Именно копия, так как интерфейс не
/// должен иметь возможности вносить изменения в структуру, а только читать её
GameInfo_t updateCurrentState();

#endif